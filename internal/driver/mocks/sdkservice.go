// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	http "net/http"

	interfaces "github.com/edgexfoundry/go-mod-bootstrap/v2/bootstrap/interfaces"
	logger "github.com/edgexfoundry/go-mod-core-contracts/v2/clients/logger"

	mock "github.com/stretchr/testify/mock"

	models "github.com/edgexfoundry/go-mod-core-contracts/v2/models"

	service "github.com/edgexfoundry/device-sdk-go/v2/pkg/service"
)

// SDKService is an autogenerated mock type for the SDKService type
type SDKService struct {
	mock.Mock
}

// AddDevice provides a mock function with given fields: device
func (_m *SDKService) AddDevice(device models.Device) (string, error) {
	ret := _m.Called(device)

	var r0 string
	if rf, ok := ret.Get(0).(func(models.Device) string); ok {
		r0 = rf(device)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.Device) error); ok {
		r1 = rf(device)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddDeviceAutoEvent provides a mock function with given fields: deviceName, event
func (_m *SDKService) AddDeviceAutoEvent(deviceName string, event models.AutoEvent) error {
	ret := _m.Called(deviceName, event)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, models.AutoEvent) error); ok {
		r0 = rf(deviceName, event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddDeviceProfile provides a mock function with given fields: profile
func (_m *SDKService) AddDeviceProfile(profile models.DeviceProfile) (string, error) {
	ret := _m.Called(profile)

	var r0 string
	if rf, ok := ret.Get(0).(func(models.DeviceProfile) string); ok {
		r0 = rf(profile)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.DeviceProfile) error); ok {
		r1 = rf(profile)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddProvisionWatcher provides a mock function with given fields: watcher
func (_m *SDKService) AddProvisionWatcher(watcher models.ProvisionWatcher) (string, error) {
	ret := _m.Called(watcher)

	var r0 string
	if rf, ok := ret.Get(0).(func(models.ProvisionWatcher) string); ok {
		r0 = rf(watcher)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.ProvisionWatcher) error); ok {
		r1 = rf(watcher)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddRoute provides a mock function with given fields: route, handler, methods
func (_m *SDKService) AddRoute(route string, handler func(http.ResponseWriter, *http.Request), methods ...string) error {
	_va := make([]interface{}, len(methods))
	for _i := range methods {
		_va[_i] = methods[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, route, handler)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, func(http.ResponseWriter, *http.Request), ...string) error); ok {
		r0 = rf(route, handler, methods...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AsyncReadings provides a mock function with given fields:
func (_m *SDKService) AsyncReadings() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// DeviceCommand provides a mock function with given fields: deviceName, commandName
func (_m *SDKService) DeviceCommand(deviceName string, commandName string) (models.DeviceCommand, bool) {
	ret := _m.Called(deviceName, commandName)

	var r0 models.DeviceCommand
	if rf, ok := ret.Get(0).(func(string, string) models.DeviceCommand); ok {
		r0 = rf(deviceName, commandName)
	} else {
		r0 = ret.Get(0).(models.DeviceCommand)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(string, string) bool); ok {
		r1 = rf(deviceName, commandName)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// DeviceDiscovery provides a mock function with given fields:
func (_m *SDKService) DeviceDiscovery() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// DeviceProfiles provides a mock function with given fields:
func (_m *SDKService) DeviceProfiles() []models.DeviceProfile {
	ret := _m.Called()

	var r0 []models.DeviceProfile
	if rf, ok := ret.Get(0).(func() []models.DeviceProfile); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DeviceProfile)
		}
	}

	return r0
}

// DeviceResource provides a mock function with given fields: deviceName, deviceResource
func (_m *SDKService) DeviceResource(deviceName string, deviceResource string) (models.DeviceResource, bool) {
	ret := _m.Called(deviceName, deviceResource)

	var r0 models.DeviceResource
	if rf, ok := ret.Get(0).(func(string, string) models.DeviceResource); ok {
		r0 = rf(deviceName, deviceResource)
	} else {
		r0 = ret.Get(0).(models.DeviceResource)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(string, string) bool); ok {
		r1 = rf(deviceName, deviceResource)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Devices provides a mock function with given fields:
func (_m *SDKService) Devices() []models.Device {
	ret := _m.Called()

	var r0 []models.Device
	if rf, ok := ret.Get(0).(func() []models.Device); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Device)
		}
	}

	return r0
}

// GetDeviceByName provides a mock function with given fields: name
func (_m *SDKService) GetDeviceByName(name string) (models.Device, error) {
	ret := _m.Called(name)

	var r0 models.Device
	if rf, ok := ret.Get(0).(func(string) models.Device); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(models.Device)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLoggingClient provides a mock function with given fields:
func (_m *SDKService) GetLoggingClient() logger.LoggingClient {
	ret := _m.Called()

	var r0 logger.LoggingClient
	if rf, ok := ret.Get(0).(func() logger.LoggingClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(logger.LoggingClient)
		}
	}

	return r0
}

// GetProfileByName provides a mock function with given fields: name
func (_m *SDKService) GetProfileByName(name string) (models.DeviceProfile, error) {
	ret := _m.Called(name)

	var r0 models.DeviceProfile
	if rf, ok := ret.Get(0).(func(string) models.DeviceProfile); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(models.DeviceProfile)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProvisionWatcherByName provides a mock function with given fields: name
func (_m *SDKService) GetProvisionWatcherByName(name string) (models.ProvisionWatcher, error) {
	ret := _m.Called(name)

	var r0 models.ProvisionWatcher
	if rf, ok := ret.Get(0).(func(string) models.ProvisionWatcher); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(models.ProvisionWatcher)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSecretProvider provides a mock function with given fields:
func (_m *SDKService) GetSecretProvider() interfaces.SecretProvider {
	ret := _m.Called()

	var r0 interfaces.SecretProvider
	if rf, ok := ret.Get(0).(func() interfaces.SecretProvider); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.SecretProvider)
		}
	}

	return r0
}

// ListenForCustomConfigChanges provides a mock function with given fields: configToWatch, sectionName, changedCallback
func (_m *SDKService) ListenForCustomConfigChanges(configToWatch interface{}, sectionName string, changedCallback func(interface{})) error {
	ret := _m.Called(configToWatch, sectionName, changedCallback)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, string, func(interface{})) error); ok {
		r0 = rf(configToWatch, sectionName, changedCallback)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LoadCustomConfig provides a mock function with given fields: customConfig, sectionName
func (_m *SDKService) LoadCustomConfig(customConfig service.UpdatableConfig, sectionName string) error {
	ret := _m.Called(customConfig, sectionName)

	var r0 error
	if rf, ok := ret.Get(0).(func(service.UpdatableConfig, string) error); ok {
		r0 = rf(customConfig, sectionName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Name provides a mock function with given fields:
func (_m *SDKService) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ProvisionWatchers provides a mock function with given fields:
func (_m *SDKService) ProvisionWatchers() []models.ProvisionWatcher {
	ret := _m.Called()

	var r0 []models.ProvisionWatcher
	if rf, ok := ret.Get(0).(func() []models.ProvisionWatcher); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ProvisionWatcher)
		}
	}

	return r0
}

// RemoveDeviceAutoEvent provides a mock function with given fields: deviceName, event
func (_m *SDKService) RemoveDeviceAutoEvent(deviceName string, event models.AutoEvent) error {
	ret := _m.Called(deviceName, event)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, models.AutoEvent) error); ok {
		r0 = rf(deviceName, event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveDeviceByName provides a mock function with given fields: name
func (_m *SDKService) RemoveDeviceByName(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveDeviceProfileByName provides a mock function with given fields: name
func (_m *SDKService) RemoveDeviceProfileByName(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveProvisionWatcher provides a mock function with given fields: name
func (_m *SDKService) RemoveProvisionWatcher(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with given fields: force
func (_m *SDKService) Stop(force bool) {
	_m.Called(force)
}

// UpdateDevice provides a mock function with given fields: device
func (_m *SDKService) UpdateDevice(device models.Device) error {
	ret := _m.Called(device)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Device) error); ok {
		r0 = rf(device)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateDeviceOperatingState provides a mock function with given fields: deviceName, state
func (_m *SDKService) UpdateDeviceOperatingState(deviceName string, state string) error {
	ret := _m.Called(deviceName, state)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(deviceName, state)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateDeviceProfile provides a mock function with given fields: profile
func (_m *SDKService) UpdateDeviceProfile(profile models.DeviceProfile) error {
	ret := _m.Called(profile)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.DeviceProfile) error); ok {
		r0 = rf(profile)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateProvisionWatcher provides a mock function with given fields: watcher
func (_m *SDKService) UpdateProvisionWatcher(watcher models.ProvisionWatcher) error {
	ret := _m.Called(watcher)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.ProvisionWatcher) error); ok {
		r0 = rf(watcher)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Version provides a mock function with given fields:
func (_m *SDKService) Version() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type mockConstructorTestingTNewSDKService interface {
	mock.TestingT
	Cleanup(func())
}

// NewSDKService creates a new instance of SDKService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSDKService(t mockConstructorTestingTNewSDKService) *SDKService {
	mock := &SDKService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
