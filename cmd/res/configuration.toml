[Writable]
LogLevel = "INFO"
  # Example InsecureSecrets configuration that simulates SecretStore for when EDGEX_SECURITY_SECRET_STORE=false
  # InsecureSecrets are required for when Redis is used for message bus
  [Writable.InsecureSecrets]
    [Writable.InsecureSecrets.DB]
    path = "redisdb"
      [Writable.InsecureSecrets.DB.Secrets]
      username = ""
      password = ""

    [Writable.InsecureSecrets.credentials001]
    path = "credentials001"
      [Writable.InsecureSecrets.credentials001.Secrets]
      username = ""
      password = ""
      mode = "usernametoken" # assign "digest" | "usernametoken" | "both" | "none"

    [Writable.InsecureSecrets.credentials002]
    path = "credentials002"
      [Writable.InsecureSecrets.credentials002.Secrets]
      username = ""
      password = ""
      mode = "usernametoken" # assign "digest" | "usernametoken" | "both" | "none"
  [Writable.Telemetry]
    Interval = "30s"
    PublishTopicPrefix  = "edgex/telemetry" # /<service-name>/<metric-name> will be added to this Publish Topic prefix
      [Writable.Telemetry.Metrics] # All service's metric names must be present in this list.
      # Device SDK provided Service Metrics
      EventsSent = false
      ReadingsSent = false
      # Common Security Service Metrics
      SecuritySecretsRequested = false
      SecuritySecretsStored = false
      SecurityConsulTokensRequested = false
      SecurityConsulTokenDuration = false
      [Writable.Telemetry.Tags] # Contains the service level tags to be attached to all the service's metrics
  #    Gateway="my-iot-gateway" # Tag must be added here since Env Override can only change existing value, not added new ones.

[Service]
HealthCheckInterval = "10s"
Host = "localhost"
Port = 59984
ServerBindAddr = ""  # blank value defaults to Service.Host value
StartupMsg = "Camera device service started"
# MaxRequestSize limit the request body size in byte of put command
MaxRequestSize = 0 # value 0 unlimited request size.
RequestTimeout = "5s"
  [Service.CORSConfiguration]
  EnableCORS = false
  CORSAllowCredentials = false
  CORSAllowedOrigin = "https://localhost"
  CORSAllowedMethods = "GET, POST, PUT, PATCH, DELETE"
  CORSAllowedHeaders = "Authorization, Accept, Accept-Language, Content-Language, Content-Type, X-Correlation-ID"
  CORSExposeHeaders = "Cache-Control, Content-Language, Content-Length, Content-Type, Expires, Last-Modified, Pragma, X-Correlation-ID"
  CORSMaxAge = 3600

[Registry]
Type = "consul"
Host = "localhost"
Port = 8500

[Clients]
  [Clients.core-data]
  Protocol = "http"
  Host = "localhost"
  Port = 59880

  [Clients.core-metadata]
  Protocol = "http"
  Host = "localhost"
  Port = 59881

[MessageBus]
Protocol = "redis"
Host = "localhost"
Port = 6379
Type = "redis"
AuthMode = "usernamepassword"  # required for redis messagebus (secure or insecure).
SecretName = "redisdb"
  [MessageBus.Topics]
  PublishTopicPrefix = "edgex/events/device" # /<device-profile-name>/<device-name>/<source-name> will be added to this Publish Topic prefix
  DeviceCommandRequestTopic = "edgex/device/command/request/device-onvif-camera/#"   # subscribing for inbound command requests
  ResponseTopicPrefix = "edgex/response" # /<service-name>/<request-id> will be added to this prefix topic
  SystemEventTopic = "edgex/system-events/core-metadata/device/+/device-onvif-camera/#"
  [MessageBus.Optional]
  # Default MQTT and NATS Specific options that need to be here to enable environment variable overrides of them
  ClientId = "device-onvif-camera"
  Qos =  "0" # Quality of Service values are 0 (At most once), 1 (At least once) or 2 (Exactly once)
  KeepAlive =  "10" # Seconds (must be 2 or greater)
  Retained = "false"
  AutoReconnect = "true"
  ConnectTimeout = "5" # Seconds
  SkipCertVerify = "false"
  # Default NATS Specific options that need to be here to enable environment variable overrides of them
  Format = "nats"
  RetryOnFailedConnect = "true"
  QueueGroup = ""
  Durable = ""
  AutoProvision = "true"
  Deliver = "new"
  DefaultPubRetryAttempts = "2"
  Subject = "edgex/#" # Required for NATS JetStream only for stream auto provisioning

[Device]
DataTransform = true
MaxCmdOps = 128
MaxCmdValueLen = 256
ProfilesDir = "./res/profiles"
DevicesDir = "./res/devices"
UpdateLastConnected = false
EnableAsyncReadings = true
AsyncBufferSize = 16
Labels = []
UseMessageBus = true
  [Device.Discovery]
  Enabled = true
  Interval = "1h"

# Custom configs
[AppCustom]
# The number of seconds to wait when making an Onvif request before timing out
RequestTimeout = 5 # Seconds

# The Secret Path of the default credentials to use for devices which do not have MAC Addresses defined, or do not
# have credentials defined in the CredentialsMap. The magic value of 'NoAuth' here will cause the devices to default
# to not using any authentication. If authentication is required, it would then need to be manually configured.
DefaultSecretPath = "credentials001"

# BaseNotificationURL indicates the device service network location (which should be accessible from onvif devices on the network), when
# configuring an Onvif Event subscription.
BaseNotificationURL = "http://192.168.12.112:59984"

# Select which discovery mechanism(s) to use
DiscoveryMode = "both" # netscan, multicast, or both

# The target ethernet interface for multicast discovering
DiscoveryEthernetInterface = "eth0"

# List of IPv4 subnets to perform netscan discovery on, in CIDR format (X.X.X.X/Y)
# separated by commas ex: "192.168.1.0/24,10.0.0.0/24"
DiscoverySubnets = ""

# Maximum simultaneous network probes when running netscan discovery.
ProbeAsyncLimit = 4000

# Maximum amount of milliseconds to wait for each IP probe before timing out.
# This will also be the minimum time the discovery process can take.
ProbeTimeoutMillis = 2000

# Maximum amount of seconds the discovery process is allowed to run before it will be cancelled.
# It is especially important to have this configured in the case of larger subnets such as /16 and /8
MaxDiscoverDurationSeconds = 300

# Enable or disable the built in status checking of devices, which runs every CheckStatusInterval.
EnableStatusCheck = true

# The interval in seconds at which the service will check the connection of all known cameras and update the device status 
# A longer interval will mean the service will detect changes in status less quickly
# Maximum 300s (5 minutes)
CheckStatusInterval = 30

# The location of Provision Watcher json files to import when using auto-discovery
ProvisionWatcherDir = "res/provision_watchers"

  # AppCustom.CredentialsMap is a map of SecretPath -> Comma separated list of mac addresses.
  # Every SecretPath used here must also exist as a valid secret in the Secret Store.
  #
  # Note: Anything not defined here will be assigned the default credentials configured via `DefaultSecretPath`.
  #
  # Example: (Single mapping for 1 mac address to 1 credential)
  #   credentials001 = "aa:bb:cc:dd:ee:ff"
  #
  # Example: (Multi mapping for 3 mac address to 1 shared credentials)
  #   credentials002 = "11:22:33:44:55:66,ff:ee:dd:cc:bb:aa,ab:12:12:34:34:56:56"
  #
  # These mappings can also be referred to as "groups". In the above case, the `credentials001` group has 1 MAC
  # Address, and the `credentials002` group has 3 MAC Addresses.
  #
  # The special group 'NoAuth' defines mac addresses of cameras where no authentication is needed.
  # The 'NoAuth' key does not exist in the SecretStore. It is not required to add MAC Addresses in here,
  # however it avoids sending the default credentials to cameras which do not need it.
  #
  # IMPORTANT: A MAC Address may only exist in one credential group. If a MAC address is defined in more
  # than one group, it is unpredictable which group the MAC will end up in! If you wish to change the group a MAC
  # address belongs to, first remove it from its existing group, and then add it to the new one.
  [AppCustom.CredentialsMap]
  NoAuth = ""
